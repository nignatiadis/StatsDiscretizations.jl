var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = StatsDiscretizations","category":"page"},{"location":"#StatsDiscretizations","page":"Home","title":"StatsDiscretizations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [StatsDiscretizations]","category":"page"},{"location":"#StatsDiscretizations.RealLineDiscretizer","page":"Home","title":"StatsDiscretizations.RealLineDiscretizer","text":"RealLineDiscretizer{L, R, T, G <:AbstractVector{T}} <: AbstractRealLineDiscretizer{Interval{L, R, T}}\n\nAn extended continuous discretizer that partitions the real line into intervals based on a given grid of points. It extends the discretization beyond the grid by including intervals from -∞ to the first grid point and from the last grid point to +∞.\n\nThe type parameters L and R specify the endpoint types of the intervals (e.g., Closed or Open), T is the element type of the grid, and G is the type of the grid vector.\n\nFields\n\ngrid::G: The grid of points used for discretization.\n\nExamples\n\ngrid = [0.0, 1.0, 2.0]\ndiscr = RealLineDiscretizer{Closed,Open}(grid)\n\n\n\n\n\n","category":"type"},{"location":"#StatsDiscretizations.cdf-Tuple{Distributions.Distribution{Distributions.Univariate, Distributions.Continuous}, Interval}","page":"Home","title":"StatsDiscretizations.cdf","text":"cdf(distribution, interval::Interval)\n\nCompute the cumulative probability up to and including the right boundary of the interval.\n\nFor both discrete and continuous distributions, this returns:\n\nIf right-closed: P(X ≤ rightendpoint(interval))\nIf right-open: P(X < rightendpoint(interval))\n\nThe left endpoint and left boundary conditions do not affect the result, as this  function computes cumulative probability from -∞ up to the right boundary.\n\nThis is particularly useful for goodness-of-fit testing with discretized data. When  data is binned into intervals, the empirical CDF at each interval represents the  proportion of observations with values ≤ rightendpoint (or < rightendpoint if right-open). This function provides the theoretical probability for comparison.\n\nExamples\n\nusing Distributions\n\n# Continuous distribution\nd = Normal(0, 1)\ncdf(d, Interval{:open,:closed}(-1.0, 0.0))    # P(X ≤ 0) = 0.5\ncdf(d, Interval{:closed,:open}(-1.0, 0.0))    # P(X < 0) = 0.5 (same for continuous)\n\n# Discrete distribution  \nd = Poisson(2.0)\ncdf(d, Interval{:open,:closed}(0, 2))         # P(X ≤ 2)\ncdf(d, Interval{:open,:open}(0, 2))           # P(X < 2) = P(X ≤ 1)\n\nSee also: logcdf, pdf\n\n\n\n\n\n","category":"method"},{"location":"#StatsDiscretizations.logcdf-Tuple{Distributions.Distribution{Distributions.Univariate, Distributions.Continuous}, Interval}","page":"Home","title":"StatsDiscretizations.logcdf","text":"logcdf(distribution, interval::Interval)\n\nCompute the logarithm of the cumulative probability up to and including the right boundary of the interval.\n\nThis returns log(P(X ≤ rightendpoint)) for right-closed intervals or log(P(X < rightendpoint))  for right-open intervals. Provides better numerical stability for very small probabilities.\n\nExamples\n\nd = Normal(0, 1) \nlogcdf(d, Interval(-10.0, -5.0))  # log(P(X ≤ -5)) (numerically stable)\n\nSee also: cdf, logpdf\n\n\n\n\n\n","category":"method"},{"location":"#StatsDiscretizations.logpdf-Tuple{Distributions.Distribution{Distributions.Univariate, Distributions.Continuous}, Interval}","page":"Home","title":"StatsDiscretizations.logpdf","text":"logpdf(distribution, interval::Interval)\n\nCompute the logarithm of the probability that a random variable from distribution falls within the given interval.\n\nThis returns log(P(X ∈ interval)) and provides better numerical stability than  computing log(pdf(distribution, interval)) directly, especially for very small probabilities.\n\nFor continuous distributions, this uses logdiffcdf for numerical accuracy. For discrete distributions, this carefully handles boundary conditions using  log-space arithmetic to avoid numerical underflow.\n\nExamples\n\nusing Distributions, IntervalSets\n\n# Continuous distribution\nd = Normal(0, 1)\nlogpdf(d, Interval(-3.0, 3.0))  # log(P(-3 < X < 3)) ≈ log(0.997)\n\n# Discrete distribution  \nd = Poisson(10.0)\nlogpdf(d, Interval{:closed,:closed}(8, 12))  # log(P(8 ≤ X ≤ 12))\n\nSee also: pdf, logcdf\n\n\n\n\n\n","category":"method"},{"location":"#StatsDiscretizations.pdf-Tuple{Distributions.Distribution, Interval}","page":"Home","title":"StatsDiscretizations.pdf","text":"pdf(distribution, interval::Interval)\n\nCompute the probability that a random variable from distribution falls within the given interval.\n\nFor continuous distributions, this returns P(X ∈ interval) = ∫_{interval} pdf(x) dx.\n\nFor discrete distributions, this returns the sum of probability masses for all  integer points contained within the interval, respecting the boundary conditions  (open vs closed endpoints).\n\nThe interval boundary behavior follows these rules:\n\nInterval{:closed,:closed}(a,b): includes both endpoints [a,b]  \nInterval{:open,:closed}(a,b): excludes left endpoint (a,b]\nInterval{:closed,:open}(a,b): excludes right endpoint [a,b)\nInterval{:open,:open}(a,b): excludes both endpoints (a,b)\n\nExamples\n\nusing Distributions, IntervalSets\n\n# Continuous distribution: probability over interval\nd = Normal(0, 1)\npdf(d, Interval(-1.0, 1.0))  # ≈ 0.683 (68% of standard normal)\n\n# Discrete distribution: sum of point masses\nd = Poisson(2.0) \npdf(d, Interval{:closed,:closed}(1, 3))  # P(X=1) + P(X=2) + P(X=3)\npdf(d, Interval{:open,:closed}(1, 3))    # P(X=2) + P(X=3)\n\nSee also: logpdf, cdf\n\n\n\n\n\n","category":"method"},{"location":"#StatsDiscretizations.unwrap-Tuple{Any}","page":"Home","title":"StatsDiscretizations.unwrap","text":"unwrap(x)\n\nUnwraps the value x. By default, returns x as is.\n\n\n\n\n\n","category":"method"},{"location":"#StatsDiscretizations.wrap-Tuple{Any, Any}","page":"Home","title":"StatsDiscretizations.wrap","text":"wrap(x, val)\n\nWraps the value val based on x. By default, returns val as is.\n\n\n\n\n\n","category":"method"}]
}
